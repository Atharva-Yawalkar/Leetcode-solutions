#include <vector>
#include <string>

class TrieNode {
public:
    char data;
    TrieNode* children[26];
    bool isTerminal;

    TrieNode(char ch) {
        data = ch;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
        isTerminal = false;
    }
};

class Trie {
public:
    TrieNode* root;

    Trie() {
        root = new TrieNode('\0');
    }

    void insertUtil(TrieNode* root, const std::string& word) {
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'a';
        TrieNode* child;
        if (root->children[index] != nullptr) {
            child = root->children[index];
        }
        else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
        }
        insertUtil(child, word.substr(1));
    }

    void insertWord(const std::string& word) {
        insertUtil(root, word);
    }

    void printSuggestions(TrieNode* curr, std::vector<std::string>& temp, std::string prefix) {
        if (curr->isTerminal) {
            temp.push_back(prefix);
        }

        for (char ch = 'a'; ch <= 'z'; ch++) {
            TrieNode* next = curr->children[ch - 'a'];

            if (next != nullptr) {
                prefix.push_back(ch);
                printSuggestions(next, temp, prefix);
                prefix.pop_back();
            }
        }
    }

    std::vector<std::vector<std::string>> getSuggestions(const std::string& str) {
        TrieNode* prev = root;

        std::vector<std::vector<std::string>> output;
        std::string prefix = "";

        for (char ch : str) {
            prefix.push_back(ch);

            TrieNode* curr = prev->children[ch - 'a'];

            if (curr == nullptr) {
                break;
            }
            std::vector<std::string> temp;
            printSuggestions(curr, temp, prefix);

            output.push_back(temp);
            prev = curr;
        }
        return output;
    }
};

std::vector<std::vector<std::string>> phoneDirectory(const std::vector<std::string>& contactList, const std::string& queryStr) {
    Trie* t = new Trie();

    for (const std::string& str : contactList) {
        t->insertWord(str);
    }

    return t->getSuggestions(queryStr);
}
